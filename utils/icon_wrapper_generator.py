import os
import re


def generate_icon_wrapper():
    """
    Generate TypeScript icon wrapper components for Heroicons SVG files
    """

    # Paths
    base_path = r"D:\Coding\Projects\Congressional-App-2025\client\assets\icons\heroicons"
    outline_path = os.path.join(base_path, "outline")
    solid_path = os.path.join(base_path, "solid")
    output_path = base_path + r'\index.tsx'

    # Check if directories exist
    if not os.path.exists(outline_path) and not os.path.exists(solid_path):
        print("Error: Neither outline nor solid directories found")
        return

    # Collect all SVG files
    icons = []

    # Process outline icons
    if os.path.exists(outline_path):
        for file in os.listdir(outline_path):
            if file.endswith('.svg'):
                icon_name = file.replace('.svg', '') + '-outline'
                icons.append({})
                icons[-1]['name'] = icon_name
                icons[-1]['type'] = 'outline'
                icons[-1]['relative_path'] = f'./{icons[-1]["type"]}/{file}'
                icons[-1]['component_name'] = kebab_to_pascal(icon_name)

    # Process solid icons
    if os.path.exists(solid_path):
        for file in os.listdir(solid_path):
            if file.endswith('.svg'):
                icon_name = file.replace('.svg', '') + '-solid'
                icons.append({})
                icons[-1]['name'] = icon_name
                icons[-1]['type'] = 'solid'
                icons[-1]['relative_path'] = f'./{icons[-1]["type"]}/{file}'
                icons[-1]['component_name'] = kebab_to_pascal(icon_name)

    generate_typescript_file(icons, output_path)


def generate_typescript_file(icons: list, output):
    lines = []

    lines.append('//\n// THIS FILE WAS AUTO GENERATED BY utils/icon_wrapper_generator.py\n//\n')
    lines.append('import React from "react";')

    for icon in icons:
        lines.append(
            f'import {icon["component_name"]}Svg from "{icon["relative_path"]}"')

    lines.append('import type { SvgProps } from "react-native-svg";')
    lines.append('')

    lines.append('''
                 type IconProps = SvgProps & {
                     size?: number;        // single size for width & height
                     color?: string;       // applies to fill and stroke
                };
    ''')

    for icon in icons:
        # We want outline icons to not have fill, and solid icons to have a fill
        if icon['type'] == 'outline':
            lines.append(f'''
                     export const {icon["component_name"]}: React.FC<IconProps> = ({{
  size = 24,
  color = 'black',
  ...props
}}) => {{
  return (
    <{icon["component_name"]}Svg
      width={{size}}
      height={{size}}
      stroke={{color}}
      {{...props}}
    />
  );
}};
                     ''')
            
        elif icon['type'] == 'solid':
            lines.append(f'''
                     export const {icon["component_name"]}: React.FC<IconProps> = ({{
  size = 24,
  color = 'black',
  ...props
}}) => {{
  return (
    <{icon["component_name"]}Svg
      width={{size}}
      height={{size}}
      fill={{color}}
      stroke={{color}}
      {{...props}}
    />
  );
}};
                     ''')

    with open(output, 'w', encoding='utf-8') as f:
        for line in lines:
            f.write(line + '\n')
    print(f"Generated TypeScript file at {output}")


def kebab_to_pascal(kebab_str):
    """Convert kebab-case to PascalCase"""
    components = kebab_str.split('-')
    return ''.join(word.capitalize() for word in components)


if __name__ == "__main__":
    generate_icon_wrapper()
